// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "MIT",
            "url": "http://github.com/ryanseipp/go-chi-api/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/": {
            "get": {
                "description": "Hello, there!",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hello"
                ],
                "summary": "Say hello!",
                "responses": {}
            }
        },
        "/v1/auth/current": {
            "get": {
                "description": "Gets the details of the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Get current user details",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.GetCurrentUserResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/v1/auth/login": {
            "post": {
                "description": "Log in user via username and password",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login Request Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.LoginUserRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/v1/auth/register": {
            "post": {
                "description": "Register user with the given username and password",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "Register Request Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.RegisterUserRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/v1/health": {
            "get": {
                "description": "Determine health of the API",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Healthcheck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.HealthCheckResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "server.GetCurrentUserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date-time"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "server.HealthCheckInfo": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Pinged DB"
                },
                "duration": {
                    "type": "string",
                    "example": "00:00:01.123456"
                },
                "key": {
                    "type": "string",
                    "example": "Database"
                },
                "status": {
                    "type": "string",
                    "example": "Healthy"
                }
            }
        },
        "server.HealthCheckResponse": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "string",
                    "example": "00:00:01.123456"
                },
                "info": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/server.HealthCheckInfo"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "Healthy"
                }
            }
        },
        "server.LoginUserRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "format": "password",
                    "maxLength": 64,
                    "minLength": 16,
                    "example": "superpassword"
                },
                "username": {
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 1,
                    "example": "myusername123"
                }
            }
        },
        "server.RegisterUserRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "format": "password",
                    "maxLength": 64,
                    "minLength": 16,
                    "example": "superpassword"
                },
                "username": {
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 1,
                    "example": "myusername123"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Go Chi API",
	Description:      "This is a sample server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
